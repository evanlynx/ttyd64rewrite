%==NOTE:=======================================================
% This `.mpat` works along with `World_mac01_ExtraData.patch`
%==============================================================

@ $Function_8024204C
{
   [BC]  CLEAR		V0 % never spawn chuck
   [1B8] J          $Function_8024204C[1E4]
}

%===============================
% Rowf's new badges shop
%===============================

@ $Script_Init_802560B4 {
  ExecWait $Script_InitRowf  
  Return
  End
}

#delete $Script_Interact_802546EC

#new:Script $Script_InitRowf
{
  Set   *MapVar[D]  00000000
  Set   *MapVar[E]  00000000
  Set   *AreaFlag[040]  .False
  Switch  *GB_StoryProgress
    Case  <  .Story:Ch1_DefeatedJrTroopa % FFFFFFB6
      Call  BindNpcInteract   ( .Npc:Self $Script_Interact_8025460C )
      Call  BindNpcIdle       ( .Npc:Self $Script_Idle_80254BB4 )
    Case  <  .Story:Ch3_StarSpritDeparted % FFFFFFF3
      Call  BindNpcInteract   ( .Npc:Self $Script_Interact_Rowf )
      Set   *AreaFlag[040]  .True
    Default
      If  *GF_MAC01_CalculatorReturned  ==  .True
        Call  BindNpcInteract   ( .Npc:Self $Script_Interact_Rowf )
        Set   *AreaFlag[040]  .True
      Else
        Call  BindNpcInteract   ( .Npc:Self $Script_Interact_80254860 )
        Call  SetNpcPos ( 00000001  -250`  0`  295` )
      EndIf
  EndSwitch
  Set   *AreaFlag[041]  .False
  Call  SetModelFlags ( ~Model:ju_2 00000200 .False )
  Call  EnableGroup   ( ~Model:jutan3 .False )
  Call  ModifyColliderFlags   ( 00000000 ~Collider:b1_2 7FFFFE00 )
  Call  ModifyColliderFlags   ( 00000000 ~Collider:b2_2 7FFFFE00 )
  Call  ModifyColliderFlags   ( 00000000 ~Collider:b3_2 7FFFFE00 )
  Call  ModifyColliderFlags   ( 00000000 ~Collider:b4_2 7FFFFE00 )
  Call  ModifyColliderFlags   ( 00000000 ~Collider:b5_2 7FFFFE00 )
  Call  RotateGroup   ( ~Model:jutan3 0000003C 00000000 00000001 00000000 )
  Call  RotateGroup   ( ~Model:jutan2 00000000 00000000 00000001 00000000 )
  Call  ScaleGroup    ( ~Model:jutan2 *Fixed[1.3] 00000001 *Fixed[1.3] )
  Set   *MapVar[1]  0000003C
  Call  MakeLocalVertexCopy   ( 00000000 ~Model:ju_4 .True )
  Call  SetCustomGfxBuilders  ( 00000000 $Function_80244B98 00000000 )
  Call  SetModelCustomGfx     ( ~Model:ju_4 00000000 FFFFFFFF )
  If  *AreaFlag[040]  ==  .True
    Bind  $Script_80255F60 .Trigger:FloorTouch ~Collider:roten 00000001 00000000
    Bind  $Script_80255FEC .Trigger:FloorTouch ~Collider:o444 00000001 00000000
    Call  SetNpcJumpscale   ( 00000001 00000001 )
  EndIf
  Thread
    Wait  5`
    Call  SetModelFlags ( ~Model:b1_2 00000004 .False )
    Call  SetModelFlags ( ~Model:b2_2 00000004 .False )
    Call  SetModelFlags ( ~Model:b3_2 00000004 .False )
    Call  SetModelFlags ( ~Model:b4_2 00000004 .False )
    Call  SetModelFlags ( ~Model:b5_2 00000004 .False )
    Call  $Function_80244D68_2 ( )
    Label  0
    If  *GF_MAC01_RowfBadgeAvailableA_New  ==  .False
      Call  GetModelCenter        ( ~Model:b5_2 )
      Call  $Function_80244E10    ( 00000000 )
    EndIf
    If  *GF_MAC01_RowfBadgeAvailableB_New  ==  .False
      Call  GetModelCenter        ( ~Model:b4_2 )
      Call  $Function_80244E10    ( 00000001 )
    EndIf
    If  *GF_MAC01_RowfBadgeAvailableC_New  ==  .False
      Call  GetModelCenter        ( ~Model:b3_2 )
      Call  $Function_80244E10    ( 00000002 )
    EndIf
    If  *GF_MAC01_RowfBadgeAvailableD_New  ==  .False
      Call  GetModelCenter        ( ~Model:b2_2 )
      Call  $Function_80244E10    ( 00000003 )
    EndIf
    If  *GF_MAC01_RowfBadgeAvailableE_New  ==  .False
      Call  GetModelCenter        ( ~Model:b1_2 )
      Call  $Function_80244E10    ( 00000004 )
    EndIf
    Wait  1`
    Goto  0
  EndThread
  Return
  End
}

@ $IntTable_80247E00
{
	00270017 00270018 00270002 00270019 00270004 00270005 00270006 00270007
	00270008 00270009 0027000A 0027000B 0027000C 0027000D 0027000E 0027000F
	00270010 00270011 00270012 00270013 00270014 00270015 0027001A $String_TooMuchBadges
}

@ $Script_Main
{
     [128]  	Call  EnableGroup   ( ~Model:jutan3 .False )
     [424]        Bind  $Script_InteractCrystalBall .Trigger:WallPressA ~Collider:o335 00000001 00000000
}

@ $Script_80261880
{
   [10]  Call  EnableModel   ( ~Model:ju_4 .False )
   [24]  Call  $Function_802463E0_2 ( )
}

@ $Script_80248070
{
      % These flags are unused now, now the game just checks in realtime the story byte to know
      % if you should be able to buy a badge.
      %
    /%0:  If  *GB_StoryProgress  <  .Story:Ch2_StarSpritDeparted % FFFFFFCB
   10:  	Goto  1
   1C:  EndIf
   24:  If  *GB_StoryProgress  <  .Story:Ch3_StarSpritDeparted % FFFFFFF3
   34:  	Goto  2
   40:  EndIf
   48:  If  *GB_StoryProgress  <  .Story:Ch4_StarSpritDeparted % 7
   58:  	Goto  3
   64:  EndIf
   6C:  If  *GB_StoryProgress  <  .Story:Ch5_ReturnedToToadTown % 29
   7C:  	Goto  4
   88:  EndIf
   90:  Set   *GF_MAC01_UnlockedRowfBadge_0F  .True
   A0:  Set   *GF_MAC01_UnlockedRowfBadge_0E  .True
   B0:  Set   *GF_MAC01_UnlockedRowfBadge_0D  .True
   C0:  Label  4
   CC:  Set   *GF_MAC01_UnlockedRowfBadge_0C  .True
   DC:  Set   *GF_MAC01_UnlockedRowfBadge_0B  .True
   EC:  Set   *GF_MAC01_UnlockedRowfBadge_0A  .True
   FC:  Label  3
  108:  Set   *GF_MAC01_UnlockedRowfBadge_09  .True
  118:  Set   *GF_MAC01_UnlockedRowfBadge_08  .True
  128:  Set   *GF_MAC01_UnlockedRowfBadge_07  .True
  138:  Label  2
  144:  Set   *GF_MAC01_UnlockedRowfBadge_06  .True
  154:  Set   *GF_MAC01_UnlockedRowfBadge_05  .True
  164:  Set   *GF_MAC01_UnlockedRowfBadge_04  .True
  174:  Label  1
  180:  Set   *GF_MAC01_UnlockedRowfBadge_03  .True
  190:  Set   *GF_MAC01_UnlockedRowfBadge_02  .True
  1A0:  Set   *GF_MAC01_UnlockedRowfBadge_01  .True
  1B0:  Set   *GF_MAC01_UnlockedRowfBadge_00  .True%/
        Call  $Function_InitSaleInventory ( )
  1CC:  Set   *MapVar[2]  *Var1
  1DC:  If  *Var3  ==  .False % badges wasn't already chosen
  1EC:  	Set   *GF_MAC01_RowfBadgeAvailableA_New  .False
  1FC:  	Set   *GF_MAC01_RowfBadgeAvailableB_New  .False
  20C:  	Set   *GF_MAC01_RowfBadgeAvailableC_New  .False
            Set   *GF_MAC01_RowfBadgeAvailableD_New  .False
            Set   *GF_MAC01_RowfBadgeAvailableE_New  .False
            If  *Var0  <  00000005
                  Set   *GF_MAC01_RowfBadgeAvailableE_New  .True
            EndIf
            If  *Var0  <  00000004
                  Set   *GF_MAC01_RowfBadgeAvailableD_New  .True
            EndIf
  21C:  	If  *Var0  <  00000003
  22C:  		Set   *GF_MAC01_RowfBadgeAvailableC_New  .True
  23C:  	EndIf
  244:  	If  *Var0  <  00000002
  254:  		Set   *GF_MAC01_RowfBadgeAvailableB_New  .True
  264:  	EndIf
  26C:  	If  *Var0  <  00000001
  27C:  		Set   *GF_MAC01_RowfBadgeAvailableA_New  .True
  28C:  	EndIf
  294:  EndIf
  29C:  Call  MakeShop      ( $RowfItemPositions_New *Var2 $RowfDummyPriceList 00000000 )
  2B8:  Call  MakeShopOwner ( $ShopOwnerRowf )
  2C8:  If  *Var3  ==  00000001 % badges were already chosen
            If  *Var0  >=  00000005
                  If  *GF_MAC01_RowfBadgeAvailableE_New  ==  .True
                        Call  $Function_SetSaleBadgeGlobalFlag    ( 00000004 )
                  EndIf
            EndIf
            If  *Var0  >=  00000004
                  If  *GF_MAC01_RowfBadgeAvailableD_New  ==  .True
                        Call  $Function_SetSaleBadgeGlobalFlag    ( 00000003 )
                  EndIf
            EndIf
  2D8:  	If  *Var0  >=  00000003
  2E8:  		If  *GF_MAC01_RowfBadgeAvailableC_New  ==  .True
  2F8:  			Call  $Function_SetSaleBadgeGlobalFlag    ( 00000002 )
  308:  		EndIf
  310:  	EndIf
  318:  	If  *Var0  >=  00000002
  328:  		If  *GF_MAC01_RowfBadgeAvailableB_New  ==  .True
  338:  			Call  $Function_SetSaleBadgeGlobalFlag    ( 00000001 )
  348:  		EndIf
  350:  	EndIf
  358:  	If  *Var0  >=  00000001
  368:  		If  *GF_MAC01_RowfBadgeAvailableA_New  ==  .True
  378:  			Call  $Function_SetSaleBadgeGlobalFlag    ( 00000000 )
  388:  		EndIf
  390:  	EndIf
  398:  EndIf
  3A0:  Return
  3A8:  End
}

@ $Script_Interact_80254A58
{
    0:  Call  $Function_AllBadgesHasBeenBought ( )
    C:  If  *Var0  ==  000000FF % shop will never close now
   1C:  	Call  SpeakToPlayer ( 00000002 00A70004 00A70001 00000000 0003000F ) % Dad says we're closing and moving to another town. ...
   3C:  Else
   44:  	Set   *Var0  *GF_MAC01_RowfBadgeAvailableA_New
   54:  	Add   *Var0  *GF_MAC01_RowfBadgeAvailableB_New
   64:  	Add   *Var0  *GF_MAC01_RowfBadgeAvailableC_New
            Add   *Var0  *GF_MAC01_RowfBadgeAvailableD_New
            Add   *Var0  *GF_MAC01_RowfBadgeAvailableE_New
        	If  *Var0  ==  00000005
   84:  		Call  SpeakToPlayer ( 00000002 00A70004 00A70001 00000000 0003000E ) % I'm a good boy because I help my dad every day. Li ...
   A4:  	Else
   AC:  		Call  SpeakToPlayer ( 00000002 00A70004 00A70001 00000000 0003000D ) % Welcome, mister. Press in front of a Badge you wan ...
   CC:  	EndIf
   D4:  EndIf
   DC:  Return
   E4:  End
}

#new:Function $Function_AllBadgesHasBeenBought
{
    0:  ADDIU     SP, SP, FFD8
    4:  SW        S3, 1C (SP)
    8:  COPY      S3, A0
    C:  SW        S2, 18 (SP)
   10:  LI        S2, *GF_MAC01_Badge1
   18:  SW        S1, 14 (SP)
   1C:  CLEAR     S1
   20:  SW        S0, 10 (SP)
   24:  COPY      S0, S1
   28:  SW        RA, 20 (SP)
   2C:  CLEAR     A0
        .o30
   30:  JAL       ~Func:get_variable
   34:  ADDU      A1, S2, S0
   38:  BEQL      V0, R0, .o40
   3C:  ADDIU     S1, S1, 1
        .o40
   40:  ADDIU     S0, S0, 1
   44:  SLTI      V0, S0, 10 % inventory size
   48:  BNE       V0, R0, .o30
   4C:  CLEAR     A0
   50:  SW        S1, 84 (S3) % save in var0
   54:  LW        RA, 20 (SP)
   58:  LW        S3, 1C (SP)
   5C:  LW        S2, 18 (SP)
   60:  LW        S1, 14 (SP)
   64:  LW        S0, 10 (SP)
   68:  LI        V0, 2
   6C:  JR        RA
   70:  ADDIU     SP, SP, 28
}

#delete $Function_802400C8
#delete $Function_80244D68
#delete $Function_80244CC0
#delete $Function_802463E0
#delete $Function_80244984

#new:IntTable $IntTable_BadgesAvailableToSaleIndexes
{
      00000000 00000000 00000000 00000000 00000000
      00000000 00000000 00000000 00000000 00000000
      00000000 00000000 00000000 00000000 00000000
      00000000 00000000 00000000 00000000 00000000
      00000000 00000000 00000000 00000000 00000000
      FFFFFFFF
}

#new:Function $Function_InitSaleInventory % Function_802400C8
{
    0:  ADDIU     SP, SP, FF80
    4:  SW        S8, 78 (SP)
    8:  COPY      S8, A0
    C:  SW        S5, 6C (SP)
        CLEAR     S5
        LI        A3, *GF_MAC01_Badge1
        LI        A0, 174
   24:  SW        RA, 7C (SP)
   28:  SW        S7, 74 (SP)
   2C:  SW        S6, 70 (SP)
   30:  SW        S4, 68 (SP)
   34:  SW        S3, 64 (SP)
   38:  SW        S2, 60 (SP)
   3C:  SW        S1, 5C (SP)
   40:  SW        S0, 58 (SP)
        % get malloc for the shop inventory
   44:  JAL       ~Func:heap_malloc
   48:  SW        A3, 50 (SP)
        % get malloc for the badge's global flags
        LI        A0, 14
   50:  JAL       ~Func:heap_malloc
   54:  COPY      S7, V0
   58:  COPY      A0, S8
   60:  SW        V0, 54 (SP)
        % clear first malloc (shopInventory)
        COPY      A0, S7
        JAL       ~Func:mem_clear
        ORI       A1, R0, 174
        LW        A3, 54 (SP)
        SW        R0, 0 (A3) % clear badgeA flag
   70:  SW        R0, 4 (A3) % clear badgeB flag
        SW        R0, 8 (A3) % clear badgeC flag
        SW        R0, C (A3) % clear badgeD flag
        SW        R0, 10 (A3) % clear badgeE flag
        JAL       $get_sold_badges_amount
        NOP
        COPY      GP, V0
        JAL       $Function_SortSoldBadges
        NOP
        % save saleBadgesFlags table in *MapVar[2]
        CLEAR     A0
        LIO       A1, *MapVar[2]
        JAL       ~Func:set_variable
        LW        A2, 54 (SP)
        %
        LIO       A1, *GF_MAC01_RowfBadgesChosen
   84:  JAL       ~Func:get_variable
        RESERVED
   8C:  BNE       V0, R0, .BadgesAlreadyChosen
   90:  COPY      A0, S8
        % get badges to put on sale
   94:  CLEAR     S3
   98:  COPY      S1, S3
   9C:  LI        S4, 1
        LIO       S2, $IntTable_BadgesAvailableToSaleIndexes
   A4:  CLEAR     A0
        .Loop_GetBadgesAvailable
        LI        A1, *GB_StoryProgress
        JAL       ~Func:get_variable
        RESERVED
        % get this badge story
        LA        A3, $Data_ShopInventory
        ORI       V1, R0, 10 % each badge uses 0x10 bytes of data
        MULT      V1, S1
        MFLO      V1
        ADDU      V1, A3, V1
        LW        A3, 4 (V1) % get itemStory
        SLT       A0, V0, A3
        BNEL      A0, R0, .GetBadgesAvailable_CheckCap
        ADDIU     S1, S1, 1
        % check if this badge has been already purchased
   B0:  CLEAR     A0
   B4:  LW        A3, 50 (SP) % get *GF_MAC01_Badge1
   BC:  JAL       ~Func:get_variable % *GF_MAC01_BadgeX
   C0:  ADDU      A1, A3, S1
   CC:  BNEL      V0, R0, .GetBadgesAvailable_CheckCap
   D0:  ADDIU     S1, S1, 1
        % badge available to be purchased found
   D4:  SW        S1, 0 (S2) % save badgeAvailable's itemInventoryIndex
   D8:  ADDIU     S2, S2, 4
   DC:  ADDIU     S3, S3, 1
   E0:  ADDIU     S1, S1, 1
        .GetBadgesAvailable_CheckCap
   E4:  SLTIU     V0, S1, 18` % Inventory size
   E8:  BNE       V0, R0, .Loop_GetBadgesAvailable
   EC:  CLEAR     A0
   F0:  BNE       S3, R0, .Init_WriteBadgesData
        COPY      S0, S7
        % there was no inventory badges available, check if there's any sold badges at least
        BEQ       GP, R0, .BadgesGotChosen
        NOP
        % There's only sold badges available
        LW        S6, 54 (SP) % get saleBadgesFlags table
        .Loop_OnlySoldBadges
        JAL       $Function_GetAvailableBadgeSold
        NOP
        ORI       A0, R0, 2 % all 5 badges has been chosen
        BEQ       V0, A0, .BadgesGotChosen
        NOP
        BNE       GP, R0, .Loop_OnlySoldBadges
        NOP
        % all sold badges has been spawned, there wasn't 5 badges tho
        BEQ       R0, R0, .BadgesGotChosen
        NOP
        .Init_WriteBadgesData
        LIO       S4, $IntTable_BadgesAvailableToSaleIndexes
   FC:  ADDIU     S2, S3, FFFF % sub 1
  100:  LW        S6, 54 (SP) % get saleBadgesFlags table
        .WriteBadgesData
        % use a badge from the inventory or from the sold ones?
        BEQ       GP, R0, .GetAvailableBadge_Inventory % there's no more sold badges available
        NOP
        % check if this one is the last inventory badge and there's still more space left for more
        % than one badge to put on sale
        ORI       A0, R0, 1
        BNE       A0, S3, .GetRandomChanceToSpawnASoldOne
        NOP
        % skip if there's already 4 badges spawned
        ORI       A2, R0, 4
        BEQ       S5, A2, .GetRandomChanceToSpawnASoldOne
        NOP
        % is the last one, get amount of sold badges neccesary to be spawned
        ORI       A1, R0, 5
        SUB       V1, A1, S5
        ADDI      V1, V1, -1
        SLTU      A1, GP, V1
        BNEL      A1, R0, .Init_Loop
        COPY      V1, GP % neccesary badges were higher than the total sold badges
        .Init_Loop
        SW        R0, 10 (SP)
        SW        V1, 14 (SP)
        .Loop_FillInventoryWithSoldBadges
        JAL       $Function_GetAvailableBadgeSold
        NOP
        % was this one the last badge?
        ORI       A0, R0, 2
        BEQ       A0, V0, .BadgesGotChosen
        NOP
        % increase loop counter
        LW        A0, 10 (SP)
        ADDIU     A0, A0, 1
        SW        A0, 10 (SP)
        LW        A1, 14 (SP)
        BEQ       A0, A1, .GetRandomChanceToSpawnASoldOne
        NOP
        BEQ       R0, R0, .Loop_FillInventoryWithSoldBadges
        NOP
        .GetRandomChanceToSpawnASoldOne
        JAL       ~Func:rand_int
        ORI       A0, R0, 100`
        SLTIU     V0, V0, 40` % 40% chance to be a sold badge
        BEQ       V0, R0, .GetAvailableBadge_Inventory
        NOP
        BEQ       GP, R0, .GetAvailableBadge_Inventory
        NOP
        % a sold badge will spawn
        JAL       $Function_GetAvailableBadgeSold
        NOP
        % was this one the last badge?
        ORI       A0, R0, 2
        BEQ       A0, V0, .BadgesGotChosen
        NOP
        .GetAvailableBadge_Inventory
        % available inventory badges found, now pick which badges will appear on sale
  108:  JAL       ~Func:rand_int
  10C:  COPY      A0, S2
        LI        A1, 8035602E % *GB_MAC01_Rowf_Badge0_1_New
  118:  COPY      S1, V0
  11C:  SLL       V0, S1, 2
  120:  ADDU      V0, S4, V0
  124:  LW        A2, 0 (V0) % get badgeInventoryIndex
        % get badge to spawn data from $Data_ShopInventory
  128:  LA        A3, $Data_ShopInventory
        ORI       V0, R0, 10 % each badge uses 0x10 bytes of data
        MULT      V0, A2
        MFLO      V1
        ADDU      V1, A3, V1
  140:  LW        V0, 0 (V1) % get badgeID
        % get item data from itemTable
  144:  LA        A3, 800878E0 % itemTable
  14C:  SW        V0, 0 (S0) % save itemID in shopInventory
  150:  SLL       V0, V0, 5
  154:  ADDU      A0, V0, A3
        LW        V0, C (V1) % get itemPrice
        % decrease price by 30%
        ORI       A3, R0, 3
        MULT      V0, A3
        MFLO      A3
        ORI       V1, R0, 10`
        DIV       A3, V1
        MFLO      A3
        SUB       V0, V0, A3
  160:  SW        V0, 4 (S0) % save itemPrice in shopInventory
        SLL       V0, S5, 1
        ADDU      A1, A1, V0 % get *GB_MAC01_Rowf_BadgeX_1_New address
        SH        A2, 0 (A1) % save badgeIndex in *GB_MAC01_Rowf_BadgeX_1_New
        LW        V0, 14 (A0) % get itemShortDescription
  16C:  SW        V0, 8 (S0) % save itemShortDescription in shopInventory
  170:  LW        A3, 50 (SP) % get *GF_MAC01_Badge1
  174:  ADDIU     S5, S5, 1
  178:  ADDU      V0, A3, A2
  180:  SW        V0, 0 (S6) % save badgeFlag
  184:  ADDIU     S6, S6, 4
  188:  SLTI      V0, S5, 5 % check if 5 badges have already spawned
  18C:  BEQ       V0, R0, .BadgesGotChosen
  190:  ADDIU     S0, S0, C % write in next badge data (ShopInventory)
  194:  SLT       V0, S1, S2 % check if a higher number than the highest item index was returned by rand_int?
  198:  BEQ       V0, R0, .WriteItemsData_DecreaseAvailableItems
  19C:  COPY      A0, S2
  1A0:  SLL       V1, S1, 2
        .Loop_ReorderIndexTable
        % Remove the spawned badge from the available badges and reorder the index table
  1A4:  ADDIU     V0, S1, 1
  1A8:  COPY      S1, V0
  1AC:  SLL       V0, S1, 2
  1B0:  ADDU      V0, S4, V0
  1B4:  LW        V0, 0 (V0)
  1B8:  ADDU      V1, S4, V1
  1BC:  SW        V0, 0 (V1)
  1C0:  SLT       V0, S1, A0
  1C4:  BNE       V0, R0, .Loop_ReorderIndexTable
  1C8:  SLL       V1, S1, 2
        .WriteItemsData_DecreaseAvailableItems
  1CC:  ADDIU     S3, S3, FFFF % sub 1 from the total badges available to be spawned (because 1 badge just spawned)
  1D0:  BNE       S3, R0, .WriteBadgesData
  1D4:  ADDIU     S2, S2, FFFF
        .BadgesGotChosen
        % set how many badges will spawn
  1D8:  COPY      A0, S8
  1DC:  LI        A1, *GB_MAC01_Rowf_NumBadges
  1E4:  JAL       ~Func:set_variable
  1E8:  COPY      A2, S5
  1EC:  COPY      A0, S8
        % badges has already been chosen, don't get new ones until the player buy these
  1F0:  LI        A1, *GF_MAC01_RowfBadgesChosen
  1F8:  JAL       ~Func:set_variable
  1FC:  LI        A2, 1
  200:  BEQ       R0, R0, .End
  204:  SW        R0, 90 (S8) % clear BadgesAlreadyChosen(bool)(var3)
        .BadgesAlreadyChosen
        % get badges chosen data
  208:  LI        A1, *GB_MAC01_Rowf_NumBadges
  20C:  JAL       ~Func:get_variable
  210:  RESERVED
  214:  COPY      S5, V0
  218:  BLEZ      S5, .BadgeDataAlreadyInit
  21C:  CLEAR     S1
        LI        S3, 8035602E % *GB_MAC01_Rowf_Badge0_1_New
  228:  LA        S6, $Data_ShopInventory
  230:  LA        S4, 800878E0 % itemTable
  238:  LW        S2, 54 (SP) % get saleBadgesFlags table
  23C:  COPY      S0, S7 % copy ShopInventory
        .Loop_WriteBadgesData_BadgesAlreadyChosen
        SLL       V0, S1, 1
        ADDU      A2, V0, S3
        LHU       A2, 0 (A2) % get badgeIndex/itemID
        % if badgeIndex is above 0xE0, interpret the index as an itemID, means is a badge from the sold badges
        SLTIU     V1, A2, E0
        BEQ       V1, R0, .GetItemData_SoldBadges
        NOP
        % get badge data from $Data_ShopInventory
        ORI       V0, R0, 10 % each badge uses 0x10 bytes of data
        MULT      V0, A2
        MFLO      V0
        BEQ       R0, R0, .WriteItemData
        ADDU      V1, S6, V0
        .GetItemData_SoldBadges
        COPY      V0, A2
        SW        V0, 0 (S0) % save itemID in shopInventory
        % get item data from itemTable
        SLL       V0, V0, 5
        ADDU      A3, V0, S4
        LHU       V0, C (A3) % get itemPrice
        SLL       V0, V0, 1 % soldItemsPrice=price*2
        % decrease price by 30%
        ORI       A0, R0, 3
        MULT      V0, A0
        MFLO      A0
        ORI       A1, R0, 10`
        DIV       A0, A1
        MFLO      A0
        SUB       V0, V0, A0
        SW        V0, 4 (S0) % save itemPrice in shopInventory
        LW        V0, 14 (A3) % get itemShortDescription
        ADDIU     S1, S1, 1
        SW        V0, 8 (S0) % save itemShortDescription in shopInventory
        COPY      V0, A2
        BEQ       R0, R0, .Loop_AlreadyChosen_CheckCap
        ADDIU     S0, S0, C % write in next item data
        .WriteItemData
  260:  LW        V0, 0 (V1) % get itemID
  264:  SW        V0, 0 (S0) % save itemID in shopInventory
        % get item data from itemTable
  268:  SLL       V0, V0, 5
  26C:  ADDU      A3, V0, S4
        LW        V0, C (V1) % get itemPrice
        % decrease price by 30%
        ORI       A0, R0, 3
        MULT      V0, A0
        MFLO      A0
        ORI       A1, R0, 10`
        DIV       A0, A1
        MFLO      A0
        SUB       V0, V0, A0
  274:  SW        V0, 4 (S0) % save itemPrice in shopInventory
        LW        V0, 14 (A3) % get itemShortDescription
  27C:  ADDIU     S1, S1, 1
  280:  SW        V0, 8 (S0) % save itemShortDescription in shopInventory
  284:  LW        A3, 50 (SP) % get *GF_MAC01_Badge1
  288:  ADDIU     S0, S0, C % write in next item data
  28C:  ADDU      V0, A3, A2
        .Loop_AlreadyChosen_CheckCap
  290:  SW        V0, 0 (S2) % save badgeFlag/badgeID in the saleBadgesFlags table
  294:  SLT       V0, S1, S5 % more badges need to spawn?
  298:  BNE       V0, R0, .Loop_WriteBadgesData_BadgesAlreadyChosen
  29C:  ADDIU     S2, S2, 4 % save in next saleBadgesFlags table slot
        .BadgeDataAlreadyInit
  2A0:  LI        V0, 1
  2A4:  SW        V0, 90 (S8) % set BadgesAlreadyChosen(Bool) as .True (var3)
        .End
  2A8:  SW        S5, 84 (S8) % save amount of badges on sale (var0)
  2AC:  LW        A3, 54 (SP)
  2B0:  SW        A3, 88 (S8) % save saleBadgesFlags table (var1)
  2B4:  SW        S7, 8C (S8) % save shopInventory (var2)
  2B8:  LW        RA, 7C (SP)
  2BC:  LW        S8, 78 (SP)
  2C0:  LW        S7, 74 (SP)
  2C4:  LW        S6, 70 (SP)
  2C8:  LW        S5, 6C (SP)
  2CC:  LW        S4, 68 (SP)
  2D0:  LW        S3, 64 (SP)
  2D4:  LW        S2, 60 (SP)
  2D8:  LW        S1, 5C (SP)
  2DC:  LW        S0, 58 (SP)
  2E0:  LI        V0, 2
  2E4:  JR        RA
  2E8:  ADDIU     SP, SP, 80
}

% Find a sold badge to put on sale and add the badge data in the sale inventory too.
%
% Returns in `V0`
%
% `0x00`= there's no more sold badges available
%
% `0x01`= sold badge found, and data updated
%
% `0x02`= sold badge found, data updated and was the last neccesary badge to spawn in the shop.
#new:Function $Function_GetAvailableBadgeSold
{
      PUSH      RA
      BEQL      GP, R0, .End
      CLEAR     V0 % The sold inventory is empty
      % sort player badges
      LIO       A0, 8010F344 % playerBadges
      ORI       A1, R0, 128` % badge cap
      LIO       A2, $pause_badges_comparator
      JAL       $pause_sort_item_list
      RESERVED
      COPY      V0, GP
      .GetRandomSoldBadge
      % get badge to spawn
      JAL       ~Func:rand_int
      ADDI      A0, V0, -1
      LIO       A0, 803560FC % *BadgeShopInventory_BadgeSold_1_1
      ORI       A1, R0, 2
      MULT      V0, A1
      MFLO      V0
      ADDU      V1, A0, V0
      LHU       V0, 0 (V1) % get badgeID
      % check if this badge is already on sale
      JAL       $Function_IsThisSoldBadgeOnSale
      COPY      A0, V0
      BEQ       V0, R0, .WriteBadgesData
      LHU       V0, 0 (V1) % get badgeID
      % this badge is already on sale
      JAL       $get_sold_badges_amount
      NOP
      BEQ       R0, R0, .GetRandomSoldBadge
      NOP
      .WriteBadgesData
      LI        A1, 8035602E % *GB_MAC01_Rowf_Badge0_1_New
      % get item data from itemTable
      LA        A3, 800878E0 % itemTable
      SW        V0, 0 (S0) % save itemID in shopInventory
      SLL       V0, V0, 5
      ADDU      A0, V0, A3
      LHU       V0, C (A0) % get itemPrice
      SLL       V0, V0, 1 % soldItemsPrice=price*2
      % decrease price by 30%
      ORI       A3, R0, 3
      MULT      V0, A3
      MFLO      A3
      ORI       A2, R0, 10`
      DIV       A3, A2
      MFLO      A3
      SUB       V0, V0, A3
      SW        V0, 4 (S0) % save itemPrice in shopInventory
      SLL       A2, S5, 1
      ADDU      A1, A1, A2 % get *GB_MAC01_Rowf_BadgeX_1_New address
      LW        V0, 14 (A0) % get itemShortDescription
      SW        V0, 8 (S0) % save itemShortDescription in shopInventory
      % save badgeID in *GB_MAC01_Rowf_BadgeX_1_New
      LHU       A2, 0 (V1) % get badgeID
      SH        A2, 0 (A1)
      SW        A2, 0 (S6) % save badgeID in the saleBadgeFlags table
      BGTZL     GP, .InitNextBadgeData
      ADDI      GP, GP, -1 % decrease sold badges amount
      .InitNextBadgeData
      ADDIU     S5, S5, 1
      ADDIU     S6, S6, 4 % write in next badgeFlag/address data
      SLTI      V0, S5, 5 % check if 5 badges have already spawned
      BEQ       V0, R0, .BadgesGotChosen
      ADDIU     S0, S0, C % write in next badge data (ShopInventory)
      BEQ       R0, R0, .End
      ORI       V0, R0, 1
      .BadgesGotChosen
      % This one was the last badge to spawn
      ORI       V0, R0, 2
      .End
      POP       RA
      JR        RA
      NOP
}

% A0=itemID
%
% Returns in which address this address is place in the sold table
#new:Function $Function_GetSoldItemAddress
{
      PUSH      RA, A0, A1, A2, A3, V1
      LIO       A3, 803560FC % *BadgeShopInventory_BadgeSold_1_1
      CLEAR     A1
      .Loop
      LH        A2, 0 (A3) % get itemID
      ADDIU     A1, A1, 1
      BEQ       A2, A0, .End
      COPY      V0, A3 % badge was found
      .GetNextBadge
      SLTI      V1, A1, 130` % amounts of items that can be sold
      BNE       V1, R0, .Loop
      ADDIU     A3, A3, 2 % read next badge
      CLEAR     V0 % badge wasn't found
      .End
      POP       RA, A0, A1, A2, A3, V1
      JR        RA
      NOP
}

#delete $Function_80240044

#new:Function $Function_SetSaleBadgeGlobalFlag % Function_80240044
{
      0:  ADDIU     SP, SP, FFE0
      4:  SW        RA, 18 (SP)
      8:  SW        S1, 14 (SP)
      C:  SW        S0, 10 (SP)
     10:  LW        V0, C (A0)
     14:  JAL       ~Func:get_variable
     18:  LW        A1, 0 (V0)
     1C:  CLEAR     A0
     20:  LI        A1, *MapVar[2]
     28:  JAL       ~Func:get_variable
     2C:  COPY      S0, V0
     30:  LAW       V1, 8007419C
     38:  LI        A1, 40
     3C:  LW        A0, 140 (V1)
     40:  SLL       V1, S0, 4
     44:  ADDU      V1, V1, A0
     48:  LW        A0, 0 (V1)
     4C:  JAL       ~Func:set_item_entity_flags
     50:  COPY      S1, V0
     54:  CLEAR     A0
     58:  SLL       S0, S0, 2
     5C:  ADDU      S0, S0, S1
     60:  LW        A1, 0 (S0)
          % check if badgeFlag is actually a badgeID, means is a sold badge
          SLTIU     A3, A1, 200 % if itemID is < 0x200
          BEQ       A3, R0, .SetFlag
          NOP
          JAL       $Function_GetSoldItemAddress
          COPY      A0, A1
          BEQ       V0, R0, .End % if sold badge has been already bought
          NOP
          BEQ       R0, R0, .End
          SH        R0, 0 (V0)
          .SetFlag
          CLEAR     A0
     64:  JAL       ~Func:set_variable
     68:  LI        A2, 1
          .End
     6C:  LW        RA, 18 (SP)
     70:  LW        S1, 14 (SP)
     74:  LW        S0, 10 (SP)
     78:  LI        V0, 2
     7C:  JR        RA
     80:  ADDIU     SP, SP, 20
}

#new:Function $Function_80244D68_2
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  CLEAR     A0
    C:  LI        A1, *GF_MAC01_RowfBadgeAvailableA_New
   10:  JAL       ~Func:get_variable
   14:  RESERVED
   18:  BNE       V0, R0, .CheckBadgeB
   1C:  CLEAR     A0
   20:  LAW       V0, 8007419C
   28:  LW        V0, 140 (V0)
   2C:  LW        A0, 0 (V0)
   30:  JAL       ~Func:set_item_entity_flags
   34:  LI        A1, 40
   38:  CLEAR     A0
        .CheckBadgeB
   3C:  LI        A1, *GF_MAC01_RowfBadgeAvailableB_New
   40:  JAL       ~Func:get_variable
   44:  RESERVED
   48:  BNE       V0, R0, .CheckBadgeC
   4C:  CLEAR     A0
   50:  LAW       V0, 8007419C
   58:  LW        V0, 140 (V0)
   5C:  LW        A0, 10 (V0)
   60:  JAL       ~Func:set_item_entity_flags
   64:  LI        A1, 40
   68:  CLEAR     A0
        .CheckBadgeC
   6C:  LI        A1, *GF_MAC01_RowfBadgeAvailableC_New
   70:  JAL       ~Func:get_variable
   74:  RESERVED
   78:  BNE       V0, R0, .CheckBadgeD
   7C:  CLEAR     A0
   80:  LAW       V0, 8007419C
   88:  LW        V0, 140 (V0)
   8C:  LW        A0, 20 (V0)
   90:  JAL       ~Func:set_item_entity_flags
   94:  LI        A1, 40
        CLEAR     A0
        .CheckBadgeD
        LI        A1, *GF_MAC01_RowfBadgeAvailableD_New
        JAL       ~Func:get_variable
        RESERVED
        BNE       V0, R0, .CheckBadgeE
        CLEAR     A0
        LAW       V0, 8007419C
        LW        V0, 140 (V0)
        LW        A0, 30 (V0)
        JAL       ~Func:set_item_entity_flags
        LI        A1, 40
        CLEAR     A0
        .CheckBadgeE
        LI        A1, *GF_MAC01_RowfBadgeAvailableE_New
        JAL       ~Func:get_variable
        RESERVED
        BNE       V0, R0, .End
        NOP
        LAW       V0, 8007419C
        LW        V0, 140 (V0)
        LW        A0, 40 (V0)
        JAL       ~Func:set_item_entity_flags
        LI        A1, 40
        .End
   98:  LW        RA, 10 (SP)
   9C:  LI        V0, 2
   A0:  JR        RA
   A4:  ADDIU     SP, SP, 18
}

#new:Function $Function_80244CC0_2
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  CLEAR     A0
    C:  LI        A1, *GF_MAC01_RowfBadgeAvailableA_New
   10:  JAL       ~Func:get_variable
   14:  RESERVED
   18:  BNE       V0, R0, .BadgeB
   1C:  CLEAR     A0
   20:  LAW       V0, 8007419C
   28:  LW        V0, 140 (V0)
   2C:  LW        A0, 0 (V0)
   30:  JAL       ~Func:clear_item_entity_flags
   34:  LI        A1, 40
   38:  CLEAR     A0
        .BadgeB
   3C:  LI        A1, *GF_MAC01_RowfBadgeAvailableB_New
   40:  JAL       ~Func:get_variable
   44:  RESERVED
   48:  BNE       V0, R0, .BadgeC
   4C:  CLEAR     A0
   50:  LAW       V0, 8007419C
   58:  LW        V0, 140 (V0)
   5C:  LW        A0, 10 (V0)
   60:  JAL       ~Func:clear_item_entity_flags
   64:  LI        A1, 40
   68:  CLEAR     A0
      .BadgeC
   3C:  LI        A1, *GF_MAC01_RowfBadgeAvailableC_New
   40:  JAL       ~Func:get_variable
   44:  RESERVED
   48:  BNE       V0, R0, .BadgeD
   4C:  CLEAR     A0
   50:  LAW       V0, 8007419C
   58:  LW        V0, 140 (V0)
   5C:  LW        A0, 20 (V0)
   60:  JAL       ~Func:clear_item_entity_flags
   64:  LI        A1, 40
   68:  CLEAR     A0
      .BadgeD
   3C:  LI        A1, *GF_MAC01_RowfBadgeAvailableD_New
   40:  JAL       ~Func:get_variable
   44:  RESERVED
   48:  BNE       V0, R0, .BadgeE
   4C:  CLEAR     A0
   50:  LAW       V0, 8007419C
   58:  LW        V0, 140 (V0)
   5C:  LW        A0, 30 (V0)
   60:  JAL       ~Func:clear_item_entity_flags
   64:  LI        A1, 40
   68:  CLEAR     A0
      .BadgeE
   6C:  LI        A1, *GF_MAC01_RowfBadgeAvailableE_New
   70:  JAL       ~Func:get_variable
   74:  RESERVED
   78:  BNE       V0, R0, .End
   7C:  NOP
   80:  LAW       V0, 8007419C
   88:  LW        V0, 140 (V0)
   8C:  LW        A0, 40 (V0)
   90:  JAL       ~Func:clear_item_entity_flags
   94:  LI        A1, 40
        .End
   98:  LW        RA, 10 (SP)
   9C:  LI        V0, 2
   A0:  JR        RA
   A4:  ADDIU     SP, SP, 18
}

#new:Function $Function_802463E0_2
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  CLEAR     A0
    C:  LI        A1, *GF_MAC01_RowfBadgeAvailableA_New
   10:  JAL       ~Func:get_variable
   14:  RESERVED
   18:  BNE       V0, R0, .BadgeB
   1C:  CLEAR     A0
   20:  LAW       V0, 8007419C
   28:  LW        V0, 140 (V0)
   2C:  LW        A0, 0 (V0)
   30:  JAL       ~Func:set_item_entity_flags
   34:  LI        A1, 40
   38:  CLEAR     A0
        .BadgeB
   3C:  LI        A1, *GF_MAC01_RowfBadgeAvailableB_New
   40:  JAL       ~Func:get_variable
   44:  RESERVED
   48:  BNE       V0, R0, .BadgeC
   4C:  CLEAR     A0
   50:  LAW       V0, 8007419C
   58:  LW        V0, 140 (V0)
   5C:  LW        A0, 10 (V0)
   60:  JAL       ~Func:set_item_entity_flags
   64:  LI        A1, 40
   68:  CLEAR     A0
      .BadgeC
   3C:  LI        A1, *GF_MAC01_RowfBadgeAvailableC_New
   40:  JAL       ~Func:get_variable
   44:  RESERVED
   48:  BNE       V0, R0, .BadgeD
   4C:  CLEAR     A0
   50:  LAW       V0, 8007419C
   58:  LW        V0, 140 (V0)
   5C:  LW        A0, 20 (V0)
   60:  JAL       ~Func:set_item_entity_flags
   64:  LI        A1, 40
   68:  CLEAR     A0
      .BadgeD
   3C:  LI        A1, *GF_MAC01_RowfBadgeAvailableD_New
   40:  JAL       ~Func:get_variable
   44:  RESERVED
   48:  BNE       V0, R0, .BadgeE
   4C:  CLEAR     A0
   50:  LAW       V0, 8007419C
   58:  LW        V0, 140 (V0)
   5C:  LW        A0, 30 (V0)
   60:  JAL       ~Func:set_item_entity_flags
   64:  LI        A1, 40
   68:  CLEAR     A0
        .BadgeE
   6C:  LI        A1, *GF_MAC01_RowfBadgeAvailableE_New
   70:  JAL       ~Func:get_variable
   74:  RESERVED
   78:  BNE       V0, R0, .End
   7C:  NOP
   80:  LAW       V0, 8007419C
   88:  LW        V0, 140 (V0)
   8C:  LW        A0, 40 (V0)
   90:  JAL       ~Func:set_item_entity_flags
   94:  LI        A1, 40
        .End
   98:  LW        RA, 10 (SP)
   9C:  LI        V0, 2
   A0:  JR        RA
   A4:  ADDIU     SP, SP, 18
}

#new:Script $Script_Interact_Rowf % previously $Script_Interact_802546EC
{
  Call  SpeakToPlayer ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_Welcome )
  Call  ShowChoice ( $String_Rowf_Choice1 )
  Switch *Var0
    Case == 0 % Buy
      Call  ContinueSpeech ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_WhatKind )
      Call  ShowChoice ( $String_Rowf_Choice2 )
      Switch *Var0
        Case == 0 % Special
          Call  ContinueSpeech ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_PressA )
        Case == 1 % Others
          Call    CloseMessage
          Call  $Function_GetOtherBadgesAmount ( *Var0 )
          If *Var0 == .False
              Call  SpeakToPlayer ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_NoStock )
              Return
          EndIf
          % init vars
          Set     *VarA .False
          Set     *VarB .False
          Set     *Var3 .False
          Label   BuyOthers
          Call    ShowCoinCounter ( .True )
          Call    $WriteAddress ( $PopUpMenu_Style05_BuyVersion 2 .True .False .False )
          Call    $Function_ShowInventory_Others
          Call    $WriteAddress ( $PopUpMenu_Style05_BuyVersion 2 .False .False .False )
          If *Var0 == -1 % Close Menu or change to another page
            If *Var3 != .False % change to another page
                Wait    10`
                Goto    BuyOthers
            EndIf
            Call    ShowCoinCounter ( .False )
            Return
          EndIf
          Set     *Var9 *Var0
          Call    $GetItemGlobalData ( *Var0 *Var5 )
          Call    $ReadAddress ( *Var5 2 *Var7 0 .False ) % get badgeName
          Call    $ReadAddress ( *Var5 0 *Var8 1A .False ) % get badgeMoveID
          Call    $GetMoveData ( *Var8 *Var8 )
          Call    $ReadAddress ( *Var8 0 *Var8 12 .False ) % get bpCost
          Call    SetMessageString ( *Var4 00000000 ) % badge name
          Call    SetMessageValue ( *Var1 00000001 ) % price
          Call    SetMessageValue ( *Var8 00000002 ) % bp cost
          Call    SpeakToPlayer ( .Npc:Self 00A70004 00A70001 00000000 00270017 ) % Confirmation
          Call    ShowChoice ( 001E000D ) % Yes No
          If *Var0 != .False % No
            Call  CloseMessage
            Wait  10`
            Goto  BuyOthers
          EndIf
          Mul     *Var1 -1
          Call    AddCoin ( *Var1 )
          Call    ShowCoinCounter ( .False )
          Call    ContinueSpeech ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_PleaseComeBack )
          Call    ShowGotItem ( *Var9 .True 00000000 )
          Call    AddBadge ( *Var9 .False )
          Call    $Function_GetTypeOfBadge ( *Var6 *Var7 )
          % set global flag or byte
          If *Var7 != .False % Previously Sold
              Call    $WriteAddress ( *Var6 1 .False .False .False ) % clear badge from the badges sold data
          Else % Inventory Badges
              Call    $Function_SetVarFromVar ( *Var6 .True ) % set global flag
          EndIf
          Call    $Function_GetOtherBadgesAmount ( *Var0 )
          If *Var0 > 0
              Wait  10`
              Goto  BuyOthers
          EndIf
        Case == 2 % Cancel
          Call  CloseMessage
      EndSwitch
    Case == 1 % Sell
          Call  CloseMessage
          Call  $Function_GetPlayerBadgesAmount ( *Var0 )
          If *Var0 == .False
              Call  SpeakToPlayer ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_NoBadges )
              Return
          EndIf
          Call  $Function_GetSoldBadgesAmount ( *Var0 )
          If *Var0 >= 130`
              Call  SpeakToPlayer ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_TooMuchStock )
              Return
          EndIf
          % init vars
          Set     *VarA .False
          Set     *VarB .False
          Set     *Var3 .False
          Label   SellBadges
          Call    ShowCoinCounter ( .True )
          Call    $Function_ShowInventory_PlayerBadges
          If *Var0 == -1 % Close Menu or change to another page
            If *Var3 != .False % change to another page
                Wait    15`
                Goto    SellBadges
            EndIf
            Call    ShowCoinCounter ( .False )
            Return
          EndIf
          Set     *Var9 *Var0
          Call    $GetItemGlobalData ( *Var0 *Var5 )
          Call    $ReadAddress ( *Var5 2 *Var7 0 .False ) % get badgeName
          Call    $ReadAddress ( *Var5 0 *Var8 1A .False ) % get badgeMoveID
          Call    $GetMoveData ( *Var8 *Var8 )
          Call    $ReadAddress ( *Var8 0 *Var8 12 .False ) % get bpCost
          Call    SetMessageString ( *Var4 00000000 ) % badge name
          Call    SetMessageValue ( *Var1 00000001 ) % price
          Call    ShowCoinCounter ( .True )
          Call    SpeakToPlayer ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_Sell_Confirmation )
          Call    ShowChoice ( 001E000D ) % Yes No
          If *Var0 != .False % No
            Call  CloseMessage
            Wait  15`
            Goto  SellBadges
          EndIf
          Call    AddCoin ( *Var1 )
          Call    ShowCoinCounter ( .False )
          Call    ContinueSpeech ( .Npc:Self 00A70004 00A70001 00000000 $String_Rowf_PleaseComeBack )
          Call    RemoveBadge ( *Var9 )
          Call    $Function_AddBadgeToSoldInventory ( *Var9 )
          Call    $Function_GetSoldBadgesAmount ( *Var0 )
          If *Var0 < 130`
              Call    $Function_GetPlayerBadgesAmount ( *Var0 )
              If *Var0 > 0
                  Wait  15`
                  Goto  SellBadges
              EndIf
          EndIf
    Case == 2 % Cancel
      Call  CloseMessage
      Return
  EndSwitch
  Call    $Function_Inventory_ClearPageData
  Return
  End
}

%======================
% Rowf's Special Deals
%======================

@ $Script_80247E74
{
    0:  Switch  *Var0
    C:  	Case  ==  00000003
   18:  	Case  ==  00000004
   24:  	Case  ==  00000001
   30:  		Switch  *Var2
   3C:  			Case  ==  00000000
   48:  				Set   *GF_MAC01_RowfBadgeAvailableA_New  .True
   58:  				Call  ModifyColliderFlags   ( 00000000 ~Collider:b5_2 7FFFFE00 )
   70:  			Case  ==  00000001
   7C:  				Set   *GF_MAC01_RowfBadgeAvailableB_New  .True
   8C:  				Call  ModifyColliderFlags   ( 00000000 ~Collider:b4_2 7FFFFE00 )
   A4:  			Case  ==  00000002
   B0:  				Set   *GF_MAC01_RowfBadgeAvailableC_New  .True
   C0:  				Call  ModifyColliderFlags   ( 00000000 ~Collider:b3_2 7FFFFE00 )
                        Case  ==  00000003
                              Set   *GF_MAC01_RowfBadgeAvailableD_New  .True
                              Call  ModifyColliderFlags   ( 00000000 ~Collider:b2_2 7FFFFE00 )
                        Case  ==  00000004
                              Set   *GF_MAC01_RowfBadgeAvailableE_New  .True
                              Call  ModifyColliderFlags   ( 00000000 ~Collider:b1_2 7FFFFE00 )
   D8:  		EndSwitch
   E0:  		Call  $Function_SetSaleBadgeGlobalFlag    ( *Var2 )
   F0:  	Case  ==  00000002
   FC:  EndSwitch
  104:  Return
  10C:  End
}

@ $Script_8025573C
{
    0:  Set   *MapFlag[0B]  .True
   10:  Call  SetNpcYaw ( 00000001  270` )
   24:  Thread
   2C:  	Call  PlaySoundAt   ( 000000A9 00000000 FFFFFF24 00000025 0000010F )
   4C:  	Call  MakeLerp      ( 00000000 FFFFFF24 0000001E .Easing:CosBounce )
   68:  	Label  0
   74:  	Call  UpdateLerp ( )
   80:  	Call  RotateModel   ( ~Model:omote *Var0 00000001 00000000 00000000 )
   A0:  	If  *Var1  ==  00000001
   B0:  		Wait  1`
   BC:  		Goto  0
   C8:  	EndIf
   D0:  EndThread
   D8:  Wait  4`
   E4:  Thread
   EC:  	Call  MakeLerp  ( 00000000 FFFFFF88 0000000A .Easing:CosSlowOvershoot )
  108:  	Label  1
  114:  	Call  UpdateLerp ( )
  120:  	DivF  *Var0  *Fixed[10.0]
  130:  	Call  TranslateModel    ( ~Model:omote2 00000000 *Var0 00000000 )
  14C:  	If  *Var1  ==  00000001
  15C:  		Wait  1`
  168:  		Goto  1
  174:  	EndIf
  17C:  EndThread
  184:  Thread
  18C:  	Call  MakeLerp  ( 00000000 00000064 00000005 .Easing:CosSlowOvershoot )
  1A8:  	Label  2
  1B4:  	Call  UpdateLerp ( )
  1C0:  	DivF  *Var0  *Fixed[10.0]
  1D0:  	Call  TranslateModel    ( ~Model:ura 00000000 00000000 *Var0 )
  1EC:  	If  *Var1  ==  00000001
  1FC:  		Wait  1`
  208:  		Goto  2
  214:  	EndIf
  21C:  EndThread
        Call  EnableModel   ( ~Model:ju_4 .True )
  238:  Call  $Function_80244CC0_2 ( )
  244:  Call  PlaySoundAtCollider   ( ~Collider:o295 000000AA 00000000 )
  25C:  UseIntBuffer  $IntTable_802555AC
  268:  Loop  00000032
  274:  	Get2Int  *Var0 *MapVar[0]
  284:  	Call  RotateGroup   ( ~Model:jutan2 *Var0 00000000 00000001 00000000 )
  2A4:  	DivF  *Var0  *Fixed[10.0]
  2B4:  	Set   *MapVar[1]  *Var0
  2C4:  	Call  RotateGroup   ( ~Model:jutan3 *Var0 00000000 00000001 00000000 )
  2E4:  	DivF  *Var0  *Fixed[200.0]
  2F4:  	AddF  *Var0  *Fixed[1.0]
  304:  	Call  ScaleGroup    ( ~Model:jutan2 *Var0 00000001 *Var0 )
  320:  	Wait  1`
  32C:  EndLoop
  334:  Call  NpcJump0  ( 00000001  -213`  6`  256`  16` )
  354:  If  *GF_MAC01_RowfBadgeAvailableA_New  ==  .False
  364:  	Call  ModifyColliderFlags   ( 00000001 ~Collider:b5_2 7FFFFE00 )
  37C:  EndIf
  384:  If  *GF_MAC01_RowfBadgeAvailableB_New  ==  .False
  394:  	Call  ModifyColliderFlags   ( 00000001 ~Collider:b4_2 7FFFFE00 )
  3AC:  EndIf
  3B4:  If  *GF_MAC01_RowfBadgeAvailableC_New  ==  .False
  3C4:  	Call  ModifyColliderFlags   ( 00000001 ~Collider:b3_2 7FFFFE00 )
  3DC:  EndIf
        If  *GF_MAC01_RowfBadgeAvailableD_New  ==  .False
	      Call  ModifyColliderFlags   ( 00000001 ~Collider:b2_2 7FFFFE00 )
        EndIf
        If  *GF_MAC01_RowfBadgeAvailableE_New  ==  .False
	      Call  ModifyColliderFlags   ( 00000001 ~Collider:b1_2 7FFFFE00 )
        EndIf
  3E4:  Return
  3EC:  End
}

@ $Script_80255B30
{
    0:  Set   *MapFlag[0B]  .False
   10:  If  *GF_MAC01_RowfBadgeAvailableA_New  ==  .False
   20:  	Call  ModifyColliderFlags   ( 00000000 ~Collider:b5_2 7FFFFE00 )
   38:  EndIf
   40:  If  *GF_MAC01_RowfBadgeAvailableB_New  ==  .False
   50:  	Call  ModifyColliderFlags   ( 00000000 ~Collider:b4_2 7FFFFE00 )
   68:  EndIf
   70:  If  *GF_MAC01_RowfBadgeAvailableC_New  ==  .False
   80:  	Call  ModifyColliderFlags   ( 00000000 ~Collider:b3_2 7FFFFE00 )
   98:  EndIf
        If  *GF_MAC01_RowfBadgeAvailableD_New  ==  .False
	      Call  ModifyColliderFlags   ( 00000000 ~Collider:b2_2 7FFFFE00 )
        EndIf
        If  *GF_MAC01_RowfBadgeAvailableE_New  ==  .False
	      Call  ModifyColliderFlags   ( 00000000 ~Collider:b1_2 7FFFFE00 )
        EndIf
   A0:  Call  NpcJump0  ( 00000001  -220`  -54`  261`  16` )
   C0:  Thread
   C8:  	Call  PlaySoundAtCollider   ( ~Collider:o295 000000AC 00000000 )
   E0:  	Call  MakeLerp      ( 00000000 00000258 00000032 .Easing:Linear )
   FC:  	Label  A
  108:  	Call  UpdateLerp ( )
  114:  	Call  RotateGroup   ( ~Model:jutan2 *Var0 00000000 00000001 00000000 )
  134:  	DivF  *Var0  *Fixed[10.0]
  144:  	Set   *MapVar[1]  *Var0
  154:  	Call  RotateGroup   ( ~Model:jutan3 *Var0 00000000 00000001 00000000 )
  174:  	DivF  *Var0  *Fixed[200.0]
  184:  	AddF  *Var0  *Fixed[1.0]
  194:  	Call  ScaleGroup    ( ~Model:jutan2 *Var0 00000001 *Var0 )
  1B0:  	If  *Var1  ==  00000001
  1C0:  		Wait  1`
  1CC:  		Goto  A
  1D8:  	EndIf
            Call  EnableModel   ( ~Model:ju_4 .False )
  1F4:  	Call  $Function_80244D68_2 ( )
  200:  EndThread
  208:  Wait  10`
  214:  Thread
  21C:  	Call  MakeLerp      ( FFFFFF24 00000000 00000014 .Easing:QuadraticIn )
  238:  	Label  0
  244:  	Call  UpdateLerp ( )
  250:  	Call  RotateModel   ( ~Model:omote *Var0 00000001 00000000 00000000 )
  270:  	If  *Var1  ==  00000001
  280:  		Wait  1`
  28C:  		Goto  0
  298:  	EndIf
  2A0:  	Call  PlaySoundAt   ( 000000AB 00000000 FFFFFF24 00000025 0000010F )
  2C0:  EndThread
  2C8:  Wait  15`
  2D4:  Thread
  2DC:  	Call  MakeLerp  ( FFFFFF88 00000000 0000000A .Easing:CosInOut )
  2F8:  	Label  1
  304:  	Call  UpdateLerp ( )
  310:  	DivF  *Var0  *Fixed[10.0]
  320:  	Call  TranslateModel    ( ~Model:omote2 00000000 *Var0 00000000 )
  33C:  	If  *Var1  ==  00000001
  34C:  		Wait  1`
  358:  		Goto  1
  364:  	EndIf
  36C:  EndThread
  374:  Thread
  37C:  	Call  MakeLerp  ( 00000064 00000000 00000005 .Easing:CosInOut )
  398:  	Label  2
  3A4:  	Call  UpdateLerp ( )
  3B0:  	DivF  *Var0  *Fixed[10.0]
  3C0:  	Call  TranslateModel    ( ~Model:ura 00000000 00000000 *Var0 )
  3DC:  	If  *Var1  ==  00000001
  3EC:  		Wait  1`
  3F8:  		Goto  2
  404:  	EndIf
  40C:  EndThread
  414:  Wait  31`
  420:  Return
  428:  End
}

% Rowf Jr.
@ $Script_Idle_80255500 % Pulling carpet animation
{
    [0]  Set   *Var0  *Fixed[58.0] % X offset, was 53.0
}

#delete $RowfItemPositions

#new:ShopItemPositions $RowfItemPositions_New
{
      ~Short:Model:b5_2 ~Short:Collider:b5_2
      ~Short:Model:b4_2 ~Short:Collider:b4_2
	~Short:Model:b3_2 ~Short:Collider:b3_2
	~Short:Model:b2_2 ~Short:Collider:b2_2
	~Short:Model:b1_2 ~Short:Collider:b1_2
}



% Call $Function_SetVarFromVar ( var newValue )
#new:Function $Function_SetVarFromVar
{
    PUSH    RA, A0, A1, A2, A3, V0, V1, S0, S1
    COPY    S0, A0
    LW      A1, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 0 (A1)
    COPY    S1, V0
    COPY    A0, S0
    LW      A1, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 4 (A1)
    COPY    A0, S0
    COPY    A1, S1
    JAL     ~Func:set_variable
    COPY    A2, V0
    POP     RA, A0, A1, A2, A3, V0, V1, S0, S1
    JR      RA
    ORI     V0, R0, 2
}

#string $String_Rowf_Welcome
{
[Style Right]
Hey! Welcome, buddy![BR]
[Pause 10]Well, we got it open![BR]
[Pause 10]What do you think?[BR]
Pretty spectacular shop, huh?[BR]
[Wait][Next]
How about buying something?[BR]
[Yield][End]
}

#string $String_Rowf_Choice1
{
[Style Choice pos=101,90 size=122,46]
[StartChoice]
[Option 0]I'm buying![BR]
[Option 1]I'm selling![BR]
[EndChoice cancel=2][End]
}

#string $String_Rowf_WhatKind
{
[Next]
What kind of badges interest[BR]
you?!?[BR]
[Yield][End]
}

#string $String_Rowf_Sell_Confirmation
{
[Style Right]
Look, just because it's you, I'll[BR]
buy that [SaveColor][Color:20][Var 0][RestoreColor] for only[BR]
[SaveColor][Color:20][Var 1] coins[RestoreColor], what do you think[BR]
buddy?[BR]
[Yield][End]
}

#string $String_Rowf_PleaseComeBack
{
	[Next]
	Please come again.[Wait][End]
}

#string $String_Rowf_Choice2
{
[Style Choice pos=101,90 size=138,46]
[StartChoice]
[Option 0]Special Deals[BR]
[Option 1]Others[BR]
[EndChoice cancel=2][End]
}

#string $String_Rowf_PressA
{
[Next]
If you're looking for special[BR]
deals, you'll find 'em on that[BR]
carpet![BR]
[Wait][Next]
Just press [A] in front of a[BR]
Badge you want to buy.
[Wait][End]
}

#string $String_Rowf_NoStock
{
[Style Right]
Sorry bud, but right now, we are[BR]
out of stock, please come back[BR]
later.
[Wait][End]
}

#string $String_Rowf_NoBadges
{
[Style Right]
Sorry bud, but looks like you,[BR]
don't have any badge, please[BR]
come back when you have a few.
[Wait][End]
}

#string $String_Rowf_TooMuchStock
{
[Style Right]
Sorry bud, but it seems that now[BR]
I already have too big inventory,[BR]
I can't buy anything from you for[BR]
now.
[Wait][End]
}

%===============================
% Merlon
%===============================

% Merlon now upgrades your partners.

#new:Script $Script_InteractCrystalBall
{
      Call  DisablePlayerInput    ( .True )
      Call  SpeakToPlayer     ( 00000000 00A50004 00A50001 00000000 $Script_Merlon_Start )
      Call  ShowChoice        ( $String_Choice_Merlon )
      Switch *Var0
            Case == 0 % Predict path
                  Call        CloseMessage
                  Call        DisablePlayerInput    ( .False )
                  ExecWait    $Script_8024F27C
            Case == 1 % Partners
                  ExecWait    $Script_UpgradePartners_Main
            Case == 2 % Cancel
                  Call  CloseMessage
                  Call  DisablePlayerInput    ( .False )
      EndSwitch
      Return
      End
}

#string $Script_Merlon_Start
{
[Style Right]
Hello Mario, how can I help you[BR]
today?[BR]
[Yield][End]
}

#string $String_Choice_Merlon
{
[Style Choice pos=82,90 size=165,46]
[StartChoice]
[Option 0]Predict path[BR]
[Option 1]Upgrade partners[BR]
[EndChoice cancel=2][End]
}

%=================
% New Game Plus
%=================

#define .NpcID:NPC_Settings              27
#define .NpcID:NPC_NGPlus                28

@ $NpcGroupList_8025EFF0 {
  00000001 $NpcGroup_8025E008 00000000
  00000004 $NpcGroup_80253C5C 00000000
  00000004 $NpcGroup_80253488 00000000
  00000001 $NpcGroup_80253298 00000000
  00000002 $NpcGroup_802566FC 00000000
  0000000A $NpcGroup_8025CCA8 00000000
  00000001 $NpcGroup_Settings 00000000
  00000001 $NpcGroup_NGPlus   00000000
  00000000 00000000 00000000
}

@ $NpcGroupList_8025F044 {
  00000001 $NpcGroup_8025E008 00000000
  00000001 $NpcGroup_80253298 00000000
  00000002 $NpcGroup_802566FC 00000000
  0000000A $NpcGroup_8025CCA8 00000000
  00000001 $NpcGroup_Settings 00000000
  00000001 $NpcGroup_NGPlus   00000000
  00000000 00000000 00000000
}


@ $NpcGroupList_8025F080 {
  00000001 $NpcGroup_8025E208 00000000
  00000001 $NpcGroup_80253298 00000000
  00000002 $NpcGroup_802566FC 00000000
  0000000A $NpcGroup_8025CCA8 00000000
  00000001 $NpcGroup_Settings 00000000
  00000001 $NpcGroup_NGPlus   00000000
  00000000 00000000 00000000
}

@ $NpcGroupList_8025F0BC {
  00000004 $NpcGroup_8025E3F8 00000000
  00000001 $NpcGroup_80253298 00000000
  00000002 $NpcGroup_802566FC 00000000
  0000000A $NpcGroup_8025CCA8 00000000
  00000001 $NpcGroup_Settings 00000000
  00000001 $NpcGroup_NGPlus   00000000
  00000000 00000000 00000000
}

@ $NpcGroupList_8025F0F8 {
  00000001 $NpcGroup_8025441C 00000000
  00000001 $NpcGroup_80253298 00000000
  00000002 $NpcGroup_802566FC 00000000
  00000001 $NpcGroup_8025EBC8 00000000
  0000000A $NpcGroup_8025CCA8 00000000
  00000001 $NpcGroup_Settings 00000000
  00000001 $NpcGroup_NGPlus   00000000
  00000000 00000000 00000000
}

@ $NpcGroupList_8025EFA8 {
  00000001 $NpcGroup_80253298 00000000
  00000002 $NpcGroup_802566FC 00000000
  0000000A $NpcGroup_8025CCA8 00000000
  00000001 $NpcGroup_8025EBC8 00000000
  00000001 $NpcGroup_8025EDB8 00000000
  00000001 $NpcGroup_Settings 00000000
  00000001 $NpcGroup_NGPlus   00000000
  00000000 00000000 00000000
}

#new:NpcGroup $NpcGroup_NGPlus
{
	.NpcID:NPC_NGPlus $NpcSettings_8024C5BC ~Vec3f:NPC_NGPlus
	00400D09 $Script_Init_NPC_NGPlus 00000000 00000000 0000010E
	~NoDrops
	~Movement:NPC_NGPlus
	~AnimationTable:NPC_NGPlus
	00000000 00000000 00000000 $Tattle_NGPlus
}

#string $Tattle_NGPlus
{
[Style Tattle][EnableCDownNext]
That's Eldstar! What's he doing[BR]
here!? You better be prepared[BR]
before you talk to him...
[Wait][End]
}

%==================================================
% Settings NPC
%==================================================

#new:NpcGroup $NpcGroup_Settings
{
	.NpcID:NPC_Settings $NpcSettings_8024C5BC ~Vec3f:NPC_Settings
	00402D09 $Script_Init_NPC_Settings 00000000 00000000 0000010E
	~NoDrops
	~Movement:NPC_Settings
	~AnimationTable:NPC_Settings
	00000000 00000000 00000000 $Tattle_SettingsNPC
}

#string $Tattle_SettingsNPC
{
[Style Tattle][EnableCDownNext]
That's the Settings Toad![BR]
He can change your, um...[BR]
settings?[BR]
[Wait][Next]
You should probably just[BR]
talk to him yourself, Mario.
[Wait][End]
}

#new:NpcSettings $NpcSettings_8024C5BC
{
	00000000 001A0018 00000000 00000000 00000000 00000000 00000000 00000000
	00000000 00000000 00630000
}

%===============================

% Clover Code
@ $Function_8024522C
{
  [A4]  LA        A3, $Global_ItemHudScripts
}
