#new:Header $Header
{
	[MainScript] $Script_Main
	[Background] 00000000
	[EntryList] $EntryList
	[EntryCount] 1
    [MapTattle]  $Function_GetTattle
}

#new:EntryList $EntryList
{
	~Vec4f:Entry0
}

#new:Script_Main $Script_Main
{
	Set   *GB_WorldLocation  .Location:DryDryRuins
	Call  SetCamPerspective  ( .Cam:Default 00000003 00000019 00000010 00001000 )
	Call  SetCamBGColor      ( .Cam:Default 00000000 00000000 00000000 )
	Call  SetCamEnabled      ( .Cam:Default .True )
	Call  SetCamLeadPlayer   ( .Cam:Default .False )
	Exec  $Script_SetupMusic
	Exec  $Script_SetupTexturePan
    Call  MakeItemEntity ( .Item:HappyHeartP ~Vec3d:itemPos .ItemSpawnMode:Fixed_NeverVanish *GF_ISK21_Item )
    Set   *MapVar[1] *Var0
    Exec  $Script_InitStuff
    Set   *Var0 $Script_CreateExitTriggers
	Exec  EnterWalk
	Return
	End
}

#new:Script $Script_InitStuff
{
    Call  ParentColliderToModel ( ~Collider:sand1_top   ~Model:sand1_handler )
    Call  ParentColliderToModel ( ~Collider:sand1_floor ~Model:sand1_handler )
    Call  ParentColliderToModel ( ~Collider:sand2_top   ~Model:sand2_handler )
    Call  ParentColliderToModel ( ~Collider:sand2_floor ~Model:sand2_handler )
    Call  ParentColliderToModel ( ~Collider:sand2_deadzone2 ~Model:sand2_handler )
    Exec  $Script_SinkPlayer_Sand1
    Exec  $Script_SinkPlayer_Sand2
    Bind  $Script_UpdateRespawnPoint_1 .Trigger:FloorTouch ~Collider:safe1 00000001 00000000
    Bind  $Script_UpdateRespawnPoint_2 .Trigger:FloorTouch ~Collider:safe2 00000001 00000000
    Bind  $Script_UpdateRespawnPoint_3 .Trigger:FloorTouch ~Collider:safe3 00000001 00000000
    Bind  $Script_UpdateRespawnPoint_4 .Trigger:FloorTouch ~Collider:safe4 00000001 00000000
    Bind  $Script_UpdateRespawnPoint_5 .Trigger:FloorTouch ~Collider:safe5 00000001 00000000
    Bind  $Script_UpdateRespawnPoint_6 .Trigger:FloorTouch ~Collider:safe6 00000001 00000000
    Bind  $Script_DrownMario .Trigger:FloorTouch ~Collider:sand2_deadzone1 00000001 00000000
    Bind  $Script_DrownMario .Trigger:FloorTouch ~Collider:sand2_deadzone2 00000001 00000000
    If *GF_ISK21_Item == .False
        Bind  $Script_GetItem .Trigger:WallPressA ~Collider:itemTrigger 00000001 00000000
    EndIf
    Return
    End
}

#new:Script $Script_SinkPlayer_Sand1
{
    Set  *Var0 ~Model:sand1_handler
    Set  *Var1 ~PosYd:Pos_Sand1_TopPos
    Set  *Var2 ~Collider:sand1_top
    Set  *Var3 ~Collider:sand1_floor
    Set  *Var4 ~Collider:sand1_deadzone
    Set  *Var5 .False
    Exec $Script_HandleSinkPlayer
    Return
    End
}

#new:Script $Script_SinkPlayer_Sand2
{
    Set  *Var0 ~Model:sand2_handler
    Set  *Var1 ~PosYd:Pos_Sand2_TopPos
    Set  *Var2 ~Collider:sand2_top
    Set  *Var3 ~Collider:sand2_floor
    Set  *Var4 ~Collider:sand2_deadzone1
    Set  *Var5 ~Collider:sand2_deadzone2
    Exec $Script_HandleSinkPlayer
    Return
    End
}

#new:Script $Script_HandleSinkPlayer
{
    SetGroup 2
    Set *VarA *Var0
    Set *VarB *Var1
    Set *VarC *Var2
    Set *VarD *Var3
    Set *VarE *Var4
    Set *VarF *Var5
    %
    Set *Var8 5
    Loop
        Call    $ReadAddress ( 8015A552 1 *Var0 .False .False ) % get the collider player is standing on rn
        If *Var0 == *VarD
            Call    GetCurrentPartner ( *Var0 )
            If *Var0 != .Partner:Lakilester % Don't sink if player is using lakilester
                Call 	$ReadBitFlag ( 8010EFCA .False .False 5 *Var0 )
                If *Var0 != .True % Don't sink if player inputs are locked.
                    If *Var8 == 0
                        Set     *Var8 5
                        Call    GetColliderCenter ( *VarE )
                        Set     *Var3 *Var1
                        Call    GetModelCenter ( *VarA )
                        If *Var1 <= *Var3 % Mario will respawn
                            ExecWait $Script_MarioDrowned
                            Call    TranslateModel ( *VarA .False *VarB .False )
                        Else
                            Set     *Var4 *VarB
                            Sub     *Var1 *Var4
                            Sub     *Var1 1 % y
                            Call    TranslateModel ( *VarA .False *Var1 .False )
                        EndIf
                        Call    UpdateColliderTransform ( *VarC )
                        Call    UpdateColliderTransform ( *VarD )
                        If *VarF != .False
                            Call    UpdateColliderTransform ( *VarF )
                        EndIf
                    EndIf
                    Sub     *Var8 1
                    If *VarF == .False % only Sand1
                        % move player to the right
                        Call    GetPlayerPos ( *Var0 *Var1 *Var2 )
                        Add     *Var0 1 % X
                        Call    SetPlayerPos ( *Var0 *Var1 *Var2 )
                    EndIf
                EndIf
            EndIf
        Else
            % Rise collisions
            Call 	$ReadBitFlag ( 8010EFCA .False .False 5 *Var0 )
            If *Var0 != .True % Don't rise if player inputs are locked.
                Call    GetModelCenter ( *VarA )
                If *Var1 < *VarB
                    Set     *Var3 *VarB
                    Sub     *Var1 *Var3
                    Set     *Var3 *Var1
                    Add     *Var3 2 % y
                    % Do final check
                    Call    GetModelCenter ( *VarA )
                    If *Var1 > *VarB
                        Set *Var3 .False
                    EndIf
                    Call    TranslateModel ( *VarA .False *Var3 .False )
                    Call    UpdateColliderTransform ( *VarC )
                    Call    UpdateColliderTransform ( *VarD )
                    If *VarF != .False
                        Call    UpdateColliderTransform ( *VarF )
                    EndIf
                EndIf
            EndIf
        EndIf
        Wait    1
    EndLoop
    Return
    End
}

#new:Script $Script_MarioDrowned
{
    Call    PlaySound ( 20E3 )
    If *VarA == .Partner:Lakilester
        Call    $WriteAddress ( 802BFF14 2 00000003 .False .False ) % unmount laki
    Else
        % partner wasn't using lakilester
        Call    DisablePlayerInput ( .True )
        Loop
            Call    GetPlayerActionState ( *Var0 )
            If *Var0 == .ActionState:Idle
                BreakLoop
            EndIf
            Wait    1
        EndLoop
        Call    DisablePlayerPhysics ( .True )
        Thread
            Loop 5
                Call    GetPlayerPos ( *Var0 *Var1 *Var2 )
                Sub     *Var1 1
                Call    SetPlayerPos ( *Var0 *Var1 *Var2 )
                Wait    1
            EndLoop
        EndThread
        Call    SetPlayerAnimation ( 00010002 )
        Call    SetPlayerAnimation ( 0001001B )
    EndIf
    SetF	*Var0 *Fixed[25.0] % speed
    SetF	*Var1 *Fixed[255.0]  % dark
    ExecWait $Script_FadeScreenOut
    If *VarA != .Partner:Lakilester
        Call    DisablePlayerPhysics ( .False )
    EndIf
    Switch *MapVar[0]
        Case == 0
            Call    SetPlayerPos ( ~Vec3d:Pos_Respawn1 )
        Case == 1
            Call    SetPlayerPos ( ~Vec3d:Pos_Respawn2 )
        Case == 2
            Call    SetPlayerPos ( ~Vec3d:Pos_Respawn3 )
        Case == 3
            Call    SetPlayerPos ( ~Vec3d:Pos_Respawn4 )
        Case == 4
            Call    SetPlayerPos ( ~Vec3d:Pos_Respawn5 )
        Case == 5
            Call    SetPlayerPos ( ~Vec3d:Pos_Respawn6 )
    EndSwitch
    Switch *VarA
        CaseOR == .Partner:Bow
        CaseOR == .Partner:Watt
            Call    $WriteBitFlag ( 8010EFCC .False 3 2 .True ) % stop using partner
        EndCaseGroup
    EndSwitch
    Call    TeleportPartnerToPlayer
    Call    InterpPlayerYaw ( 90` 0 )
    Wait    5
    If *VarA != .Partner:Lakilester
        Call    SetPlayerAnimation ( 00010002 )
        Call    SetPlayerAnimation ( 0001000F )
    EndIf
    SetF	*Var0 *Fixed[25.0] % speed
    SetF	*Var1 *Fixed[5.0]  % fully bright
    Exec    $Script_FadeScreenIn
    Wait    10`
    If *VarA == .Partner:Lakilester
        Return
    Else
        Call    SetPlayerAnimation ( 00010030 )
        Wait    15`
        Call    SetPlayerAnimation ( 00010031 )
        Thread
            Call    PlaySound ( 0172 )
            Wait    12`
            Call    PlaySound ( 0172 )
        EndThread
        Wait    25`
        Call    SetPlayerAnimation ( 00010002 )
        Call    DisablePlayerInput ( .False )
    EndIf    
    Return
    End
}

#new:Script $Script_DrownMario
{
    ExecWait $Script_MarioDrowned
    Call    TranslateModel ( ~Model:sand2_handler .False ~PosYd:Pos_Sand2_TopPos .False )
    Call    UpdateColliderTransform ( ~Collider:sand2_top )
    Call    UpdateColliderTransform ( ~Collider:sand2_floor )
    Call    UpdateColliderTransform ( ~Collider:sand2_deadzone2 )
    Return
    End
}

%

#new:Script $Script_UpdateRespawnPoint_1
{
    Set *MapVar[0] 0
    Return
    End
}

#new:Script $Script_UpdateRespawnPoint_2
{
    Set *MapVar[0] 1
    Return
    End
}

#new:Script $Script_UpdateRespawnPoint_3
{
    Set *MapVar[0] 2
    Return
    End
}

#new:Script $Script_UpdateRespawnPoint_4
{
    Set *MapVar[0] 3
    Return
    End
}

#new:Script $Script_UpdateRespawnPoint_5
{
    Set *MapVar[0] 4
    Return
    End
}

#new:Script $Script_UpdateRespawnPoint_6
{
    Set *MapVar[0] 5
    Return
    End
}

#new:Script $Script_GetItem
{
    Call    DisablePlayerInput ( .True )
    Call    AddBadge ( .Item:HappyHeartP 00000000 )
    Call    RemoveItemEntity ( *MapVar[1] )
    Call    ShowGotItem ( .Item:HappyHeartP .True 00000000 )
    Set     *GF_ISK21_Item .True
    Unbind
    Call    DisablePlayerInput ( .False )
    Return
    End
}

%%%

#new:Script $Script_SetupMusic
{
	Call  SetMusicTrack ( 00000000 .Song:DryDryRuins 00000000 00000008 )
	Call  ClearAmbientSounds ( 250` )
	Return
	End
}

#new:Script $Script_CreateExitTriggers
{
    Bind     $Script_Exit0  .Trigger:FloorAbove ~Collider:Exit0 00000001 00000000
	Return
	End
}

#new:Script $Script_Exit0 {
    SetGroup 0000001B
	Call     UseExitHeading  	( 3C ~Entry:Entry0 )
	Exec     ExitWalk
    Call     GotoMap	( "isk_07" 2 )
	Wait     100`
	Return
	End
}

%%%

#new:Script $Script_SetupTexturePan
{
	Call     SetTexPanner 	( ~Model:movingSands1 0 )
	Call     SetTexPanner 	( ~Model:movingSands2 1 )
	Thread
		Set  *Var[0] 0
		Set  *Var[1] 0
		Set  *Var[2] 158
		Set  *Var[3] 0
		Set  *Var[4] 0
		Set  *Var[5] 0
		Set  *Var[6] 0
		Set  *Var[7] 0
		Set  *Var[8] 0
		Set  *Var[9] 0
		Set  *Var[A] 0
		Set  *Var[B] 0
		Set  *Var[C] 0
		Exec $Script_TexturePan_Update
	EndThread
	Thread
		Set  *Var[0] 1
		Set  *Var[1] 0
		Set  *Var[2] FFFFFE11
		Set  *Var[3] 0
		Set  *Var[4] 0
		Set  *Var[5] 0
		Set  *Var[6] 0
		Set  *Var[7] 0
		Set  *Var[8] 0
		Set  *Var[9] 0
		Set  *Var[A] 0
		Set  *Var[B] 0
		Set  *Var[C] 0
		Exec $Script_TexturePan_Update
	EndThread
	Return
	End
}

#new:Script $Script_TexturePan_Update
{
    SetGroup  00000000
    If  *Var[5]  ==  00000001
        If  *Var[6]  ==  00000001
            If  *Var[7]  ==  00000001
                If  *Var[8]  ==  00000001
                    Call  $Function_TexturePan_Simple ( )
                    Return
                EndIf
            EndIf
        EndIf
    EndIf
    Call  $Function_TexturePan_Complex ( )
    Return
    End
}

#new:Function $Function_TexturePan_Simple
{
    ADDIU       SP, SP, FFE8
    SW          S0, 10 (SP)
    COPY        S0, A0
    SW          RA, 14 (SP)
    LW          V1, A8 (S0)
    LW          V0, 88 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o30
    SW          V1, A8 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o40
    ADDU        V0, V1, V0
    .o30
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o44
    SUBU        V0, V1, A0
    .o40
    SW          V0, A8 (S0)
    .o44
    LW          V1, AC (S0)
    LW          V0, 8C (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o64
    SW          V1, AC (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o74
    ADDU        V0, V1, V0
    .o64
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o78
    SUBU        V0, V1, A0
    .o74
    SW          V0, AC (S0)
    .o78
    LW          V1, B0 (S0)
    LW          V0, 90 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o98
    SW          V1, B0 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oA8
    ADDU        V0, V1, V0
    .o98
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oAC
    SUBU        V0, V1, A0
    .oA8
    SW          V0, B0 (S0)
    .oAC
    LW          V1, B4 (S0)
    LW          V0, 94 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .oCC
    SW          V1, B4 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oDC
    ADDU        V0, V1, V0
    .oCC
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oE0
    SUBU        V0, V1, A0
    .oDC
    SW          V0, B4 (S0)
    .oE0
    LW          A0, 84 (S0)
    JAL         8011BC1C
    LW          A1, A8 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC34
    LW          A1, AC (S0)
    LW          A0, 84 (S0)
    JAL         8011BC4C
    LW          A1, B0 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC64
    LW          A1, B4 (S0)
    LW          RA, 14 (SP)
    LW          S0, 10 (SP)
    CLEAR       V0
    JR          RA
    ADDIU       SP, SP, 18
}

#new:Function $Function_TexturePan_Complex
{
    ADDIU       SP, SP, FFE8
    SW          S0, 10 (SP)
    COPY        S0, A0
    BEQ         A1, R0, .o24
    SW          RA, 14 (SP)
    SW          R0, 70 (S0)
    SW          R0, 74 (S0)
    SW          R0, 78 (S0)
    SW          R0, 7C (S0)
    .o24
    LW          V0, 70 (S0)
    BNE         V0, R0, .o64
    NOP
    LW          V1, A8 (S0)
    LW          V0, 88 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o50
    SW          V1, A8 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o60
    ADDU        V0, V1, V0
    .o50
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o64
    SUBU        V0, V1, A0
    .o60
    SW          V0, A8 (S0)
    .o64
    LW          V0, 74 (S0)
    BNE         V0, R0, .oA4
    NOP
    LW          V1, AC (S0)
    LW          V0, 8C (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o90
    SW          V1, AC (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oA0
    ADDU        V0, V1, V0
    .o90
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oA4
    SUBU        V0, V1, A0
    .oA0
    SW          V0, AC (S0)
    .oA4
    LW          V0, 78 (S0)
    BNE         V0, R0, .oE4
    NOP
    LW          V1, B0 (S0)
    LW          V0, 90 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .oD0
    SW          V1, B0 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oE0
    ADDU        V0, V1, V0
    .oD0
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oE4
    SUBU        V0, V1, A0
    .oE0
    SW          V0, B0 (S0)
    .oE4
    LW          V0, 7C (S0)
    BNE         V0, R0, .o124
    NOP
    LW          V1, B4 (S0)
    LW          V0, 94 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o110
    SW          V1, B4 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o120
    ADDU        V0, V1, V0
    .o110
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o124
    SUBU        V0, V1, A0
    .o120
    SW          V0, B4 (S0)
    .o124
    LW          A0, 84 (S0)
    JAL         8011BC1C
    LW          A1, A8 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC34
    LW          A1, AC (S0)
    LW          A0, 84 (S0)
    JAL         8011BC4C
    LW          A1, B0 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC64
    LW          A1, B4 (S0)
    LW          V0, 70 (S0)
    LW          V1, 78 (S0)
    LW          A0, 98 (S0)
    ADDIU       V0, V0, 1
    SW          V0, 70 (S0)
    LW          V0, 74 (S0)
    ADDIU       V1, V1, 1
    SW          V1, 78 (S0)
    LW          V1, 70 (S0)
    ADDIU       V0, V0, 1
    SW          V0, 74 (S0)
    LW          V0, 7C (S0)
    SLT         V1, V1, A0
    ADDIU       V0, V0, 1
    BNE         V1, R0, .o198
    SW          V0, 7C (S0)
    SW          R0, 70 (S0)
    .o198
    LW          V0, 74 (S0)
    LW          V1, 9C (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1AC
    SW          R0, 74 (S0)
    .o1AC
    LW          V0, 78 (S0)
    LW          V1, A0 (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1C0
    SW          R0, 78 (S0)
    .o1C0
    LW          V0, 7C (S0)
    LW          V1, A4 (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1D4
    SW          R0, 7C (S0)
    .o1D4
    LW          RA, 14 (SP)
    LW          S0, 10 (SP)
    CLEAR       V0
    JR          RA
    ADDIU       SP, SP, 18
}

%%%

#new:Function $Function_GetTattle
{
LIO       V0, $String_Tattle
JR        RA
RESERVED
}

#string $String_Tattle {
[Style Tattle][EnableCDownNext]
Watch out for quicksand, Mario![BR]
I heard if it gets you, you[BR]
should make sure to stay calm,[BR]
and move very carefully![BR]
[Wait][Next]
Or... are you supposed to[BR]
thrash around with all your[BR]
might?[BR]
[Wait][Next]
Eh, I'm sure we'll be fine.
[Wait][End]
}